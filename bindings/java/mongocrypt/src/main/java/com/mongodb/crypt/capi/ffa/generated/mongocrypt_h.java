// Generated by jextract

package com.mongodb.crypt.capi.ffa.generated;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class mongocrypt_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_64_BIT_INO_T 0
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_VERS_1050 0
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ENABLE_CRYPTO_CNG 0
     * }
     */
    public static int MONGOCRYPT_ENABLE_CRYPTO_CNG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ENABLE_CRYPTO_COMMON_CRYPTO 1
     * }
     */
    public static int MONGOCRYPT_ENABLE_CRYPTO_COMMON_CRYPTO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ENABLE_CRYPTO_LIBCRYPTO 0
     * }
     */
    public static int MONGOCRYPT_ENABLE_CRYPTO_LIBCRYPTO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ENABLE_CRYPTO_OPENSSL 0
     * }
     */
    public static int MONGOCRYPT_ENABLE_CRYPTO_OPENSSL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ENABLE_CRYPTO 1
     * }
     */
    public static int MONGOCRYPT_ENABLE_CRYPTO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ENABLE_TRACE 0
     * }
     */
    public static int MONGOCRYPT_ENABLE_TRACE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_fast16_t;
     * }
     */
    public static final OfShort int_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_fast32_t;
     * }
     */
    public static final OfInt int_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_fast16_t;
     * }
     */
    public static final OfShort uint_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast32_t;
     * }
     */
    public static final OfInt uint_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_intptr_t;
     * }
     */
    public static final OfLong __darwin_intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_natural_t;
     * }
     */
    public static final OfInt __darwin_natural_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_ct_rune_t;
     * }
     */
    public static final OfInt __darwin_ct_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ptrdiff_t;
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_size_t;
     * }
     */
    public static final OfLong __darwin_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_wchar_t;
     * }
     */
    public static final OfInt __darwin_wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_rune_t;
     * }
     */
    public static final OfInt __darwin_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_wint_t;
     * }
     */
    public static final OfInt __darwin_wint_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_clock_t;
     * }
     */
    public static final OfLong __darwin_clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_socklen_t;
     * }
     */
    public static final OfInt __darwin_socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ssize_t;
     * }
     */
    public static final OfLong __darwin_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_time_t;
     * }
     */
    public static final OfLong __darwin_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __darwin_blkcnt_t;
     * }
     */
    public static final OfLong __darwin_blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_blksize_t;
     * }
     */
    public static final OfInt __darwin_blksize_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_dev_t;
     * }
     */
    public static final OfInt __darwin_dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsblkcnt_t;
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsfilcnt_t;
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_gid_t;
     * }
     */
    public static final OfInt __darwin_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_id_t;
     * }
     */
    public static final OfInt __darwin_id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino64_t;
     * }
     */
    public static final OfLong __darwin_ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino_t;
     * }
     */
    public static final OfLong __darwin_ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_name_t;
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_t;
     * }
     */
    public static final OfInt __darwin_mach_port_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short __darwin_mode_t;
     * }
     */
    public static final OfShort __darwin_mode_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef long long __darwin_off_t;
     * }
     */
    public static final OfLong __darwin_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_pid_t;
     * }
     */
    public static final OfInt __darwin_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_sigset_t;
     * }
     */
    public static final OfInt __darwin_sigset_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_suseconds_t;
     * }
     */
    public static final OfInt __darwin_suseconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_uid_t;
     * }
     */
    public static final OfInt __darwin_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_useconds_t;
     * }
     */
    public static final OfInt __darwin_useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_pthread_key_t;
     * }
     */
    public static final OfLong __darwin_pthread_key_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _opaque_pthread_t* __darwin_pthread_t;
     * }
     */
    public static final AddressLayout __darwin_pthread_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_addr_t;
     * }
     */
    public static final OfLong user_addr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_size_t;
     * }
     */
    public static final OfLong user_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_ssize_t;
     * }
     */
    public static final OfLong user_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_long_t;
     * }
     */
    public static final OfLong user_long_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_ulong_t;
     * }
     */
    public static final OfLong user_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_time_t;
     * }
     */
    public static final OfLong user_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_off_t;
     * }
     */
    public static final OfLong user_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long syscall_arg_t;
     * }
     */
    public static final OfLong syscall_arg_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    public static MethodHandle mongocrypt_version$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"mongocrypt_version");
    }
    /**
     * {@snippet :
     * char* mongocrypt_version(uint32_t* len);
     * }
     */
    public static MemorySegment mongocrypt_version(MemorySegment len) {
        var mh$ = mongocrypt_version$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_binary_new$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$1,"mongocrypt_binary_new");
    }
    /**
     * {@snippet :
     * mongocrypt_binary_t* mongocrypt_binary_new();
     * }
     */
    public static MemorySegment mongocrypt_binary_new() {
        var mh$ = mongocrypt_binary_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_binary_new_from_data$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3,"mongocrypt_binary_new_from_data");
    }
    /**
     * {@snippet :
     * mongocrypt_binary_t* mongocrypt_binary_new_from_data(uint8_t* data, uint32_t len);
     * }
     */
    public static MemorySegment mongocrypt_binary_new_from_data(MemorySegment data, int len) {
        var mh$ = mongocrypt_binary_new_from_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_binary_data$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$4,"mongocrypt_binary_data");
    }
    /**
     * {@snippet :
     * uint8_t* mongocrypt_binary_data(const mongocrypt_binary_t* binary);
     * }
     */
    public static MemorySegment mongocrypt_binary_data(MemorySegment binary) {
        var mh$ = mongocrypt_binary_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(binary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_binary_len$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$6,"mongocrypt_binary_len");
    }
    /**
     * {@snippet :
     * uint32_t mongocrypt_binary_len(const mongocrypt_binary_t* binary);
     * }
     */
    public static int mongocrypt_binary_len(MemorySegment binary) {
        var mh$ = mongocrypt_binary_len$MH();
        try {
            return (int)mh$.invokeExact(binary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_binary_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$0,"mongocrypt_binary_destroy");
    }
    /**
     * {@snippet :
     * void mongocrypt_binary_destroy(mongocrypt_binary_t* binary);
     * }
     */
    public static void mongocrypt_binary_destroy(MemorySegment binary) {
        var mh$ = mongocrypt_binary_destroy$MH();
        try {
            mh$.invokeExact(binary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_STATUS_OK = 0;
     * }
     */
    public static int MONGOCRYPT_STATUS_OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_STATUS_ERROR_CLIENT = 1;
     * }
     */
    public static int MONGOCRYPT_STATUS_ERROR_CLIENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_STATUS_ERROR_KMS = 2;
     * }
     */
    public static int MONGOCRYPT_STATUS_ERROR_KMS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_STATUS_ERROR_CRYPT_SHARED = 3;
     * }
     */
    public static int MONGOCRYPT_STATUS_ERROR_CRYPT_SHARED() {
        return (int)3L;
    }
    public static MethodHandle mongocrypt_status_new$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"mongocrypt_status_new");
    }
    /**
     * {@snippet :
     * mongocrypt_status_t* mongocrypt_status_new();
     * }
     */
    public static MemorySegment mongocrypt_status_new() {
        var mh$ = mongocrypt_status_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_status_set$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"mongocrypt_status_set");
    }
    /**
     * {@snippet :
     * void mongocrypt_status_set(mongocrypt_status_t* status, mongocrypt_status_type_t type, uint32_t code, char* message, int32_t message_len);
     * }
     */
    public static void mongocrypt_status_set(MemorySegment status, int type, int code, MemorySegment message, int message_len) {
        var mh$ = mongocrypt_status_set$MH();
        try {
            mh$.invokeExact(status, type, code, message, message_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_status_type$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"mongocrypt_status_type");
    }
    /**
     * {@snippet :
     * mongocrypt_status_type_t mongocrypt_status_type(mongocrypt_status_t* status);
     * }
     */
    public static int mongocrypt_status_type(MemorySegment status) {
        var mh$ = mongocrypt_status_type$MH();
        try {
            return (int)mh$.invokeExact(status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_status_code$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$5,"mongocrypt_status_code");
    }
    /**
     * {@snippet :
     * uint32_t mongocrypt_status_code(mongocrypt_status_t* status);
     * }
     */
    public static int mongocrypt_status_code(MemorySegment status) {
        var mh$ = mongocrypt_status_code$MH();
        try {
            return (int)mh$.invokeExact(status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_status_message$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"mongocrypt_status_message");
    }
    /**
     * {@snippet :
     * char* mongocrypt_status_message(mongocrypt_status_t* status, uint32_t* len);
     * }
     */
    public static MemorySegment mongocrypt_status_message(MemorySegment status, MemorySegment len) {
        var mh$ = mongocrypt_status_message$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_status_ok$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"mongocrypt_status_ok");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_status_ok(mongocrypt_status_t* status);
     * }
     */
    public static boolean mongocrypt_status_ok(MemorySegment status) {
        var mh$ = mongocrypt_status_ok$MH();
        try {
            return (boolean)mh$.invokeExact(status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_status_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"mongocrypt_status_destroy");
    }
    /**
     * {@snippet :
     * void mongocrypt_status_destroy(mongocrypt_status_t* status);
     * }
     */
    public static void mongocrypt_status_destroy(MemorySegment status) {
        var mh$ = mongocrypt_status_destroy$MH();
        try {
            mh$.invokeExact(status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_LOG_LEVEL_FATAL = 0;
     * }
     */
    public static int MONGOCRYPT_LOG_LEVEL_FATAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_LOG_LEVEL_ERROR = 1;
     * }
     */
    public static int MONGOCRYPT_LOG_LEVEL_ERROR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_LOG_LEVEL_WARNING = 2;
     * }
     */
    public static int MONGOCRYPT_LOG_LEVEL_WARNING() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_LOG_LEVEL_INFO = 3;
     * }
     */
    public static int MONGOCRYPT_LOG_LEVEL_INFO() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_LOG_LEVEL_TRACE = 4;
     * }
     */
    public static int MONGOCRYPT_LOG_LEVEL_TRACE() {
        return (int)4L;
    }
    public static MethodHandle mongocrypt_new$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2,"mongocrypt_new");
    }
    /**
     * {@snippet :
     * mongocrypt_t* mongocrypt_new();
     * }
     */
    public static MemorySegment mongocrypt_new() {
        var mh$ = mongocrypt_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_log_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"mongocrypt_setopt_log_handler");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_log_handler(mongocrypt_t* crypt, mongocrypt_log_fn_t log_fn, void* log_ctx);
     * }
     */
    public static boolean mongocrypt_setopt_log_handler(MemorySegment crypt, MemorySegment log_fn, MemorySegment log_ctx) {
        var mh$ = mongocrypt_setopt_log_handler$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, log_fn, log_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_kms_provider_aws$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$6,"mongocrypt_setopt_kms_provider_aws");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_kms_provider_aws(mongocrypt_t* crypt, char* aws_access_key_id, int32_t aws_access_key_id_len, char* aws_secret_access_key, int32_t aws_secret_access_key_len);
     * }
     */
    public static boolean mongocrypt_setopt_kms_provider_aws(MemorySegment crypt, MemorySegment aws_access_key_id, int aws_access_key_id_len, MemorySegment aws_secret_access_key, int aws_secret_access_key_len) {
        var mh$ = mongocrypt_setopt_kms_provider_aws$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, aws_access_key_id, aws_access_key_id_len, aws_secret_access_key, aws_secret_access_key_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_kms_provider_local$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"mongocrypt_setopt_kms_provider_local");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_kms_provider_local(mongocrypt_t* crypt, mongocrypt_binary_t* key);
     * }
     */
    public static boolean mongocrypt_setopt_kms_provider_local(MemorySegment crypt, MemorySegment key) {
        var mh$ = mongocrypt_setopt_kms_provider_local$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_kms_providers$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"mongocrypt_setopt_kms_providers");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_kms_providers(mongocrypt_t* crypt, mongocrypt_binary_t* kms_providers);
     * }
     */
    public static boolean mongocrypt_setopt_kms_providers(MemorySegment crypt, MemorySegment kms_providers) {
        var mh$ = mongocrypt_setopt_kms_providers$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, kms_providers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_schema_map$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"mongocrypt_setopt_schema_map");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_schema_map(mongocrypt_t* crypt, mongocrypt_binary_t* schema_map);
     * }
     */
    public static boolean mongocrypt_setopt_schema_map(MemorySegment crypt, MemorySegment schema_map) {
        var mh$ = mongocrypt_setopt_schema_map$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, schema_map);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_encrypted_field_config_map$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"mongocrypt_setopt_encrypted_field_config_map");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_encrypted_field_config_map(mongocrypt_t* crypt, mongocrypt_binary_t* efc_map);
     * }
     */
    public static boolean mongocrypt_setopt_encrypted_field_config_map(MemorySegment crypt, MemorySegment efc_map) {
        var mh$ = mongocrypt_setopt_encrypted_field_config_map$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, efc_map);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_append_crypt_shared_lib_search_path$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$6,"mongocrypt_setopt_append_crypt_shared_lib_search_path");
    }
    /**
     * {@snippet :
     * void mongocrypt_setopt_append_crypt_shared_lib_search_path(mongocrypt_t* crypt, char* path);
     * }
     */
    public static void mongocrypt_setopt_append_crypt_shared_lib_search_path(MemorySegment crypt, MemorySegment path) {
        var mh$ = mongocrypt_setopt_append_crypt_shared_lib_search_path$MH();
        try {
            mh$.invokeExact(crypt, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_set_crypt_shared_lib_path_override$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"mongocrypt_setopt_set_crypt_shared_lib_path_override");
    }
    /**
     * {@snippet :
     * void mongocrypt_setopt_set_crypt_shared_lib_path_override(mongocrypt_t* crypt, char* path);
     * }
     */
    public static void mongocrypt_setopt_set_crypt_shared_lib_path_override(MemorySegment crypt, MemorySegment path) {
        var mh$ = mongocrypt_setopt_set_crypt_shared_lib_path_override$MH();
        try {
            mh$.invokeExact(crypt, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_use_need_kms_credentials_state$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"mongocrypt_setopt_use_need_kms_credentials_state");
    }
    /**
     * {@snippet :
     * void mongocrypt_setopt_use_need_kms_credentials_state(mongocrypt_t* crypt);
     * }
     */
    public static void mongocrypt_setopt_use_need_kms_credentials_state(MemorySegment crypt) {
        var mh$ = mongocrypt_setopt_use_need_kms_credentials_state$MH();
        try {
            mh$.invokeExact(crypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"mongocrypt_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_init(mongocrypt_t* crypt);
     * }
     */
    public static boolean mongocrypt_init(MemorySegment crypt) {
        var mh$ = mongocrypt_init$MH();
        try {
            return (boolean)mh$.invokeExact(crypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_status$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3,"mongocrypt_status");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_status(mongocrypt_t* crypt, mongocrypt_status_t* status);
     * }
     */
    public static boolean mongocrypt_status(MemorySegment crypt, MemorySegment status) {
        var mh$ = mongocrypt_status$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"mongocrypt_destroy");
    }
    /**
     * {@snippet :
     * void mongocrypt_destroy(mongocrypt_t* crypt);
     * }
     */
    public static void mongocrypt_destroy(MemorySegment crypt) {
        var mh$ = mongocrypt_destroy$MH();
        try {
            mh$.invokeExact(crypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_crypt_shared_lib_version_string$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"mongocrypt_crypt_shared_lib_version_string");
    }
    /**
     * {@snippet :
     * char* mongocrypt_crypt_shared_lib_version_string(const mongocrypt_t* crypt, uint32_t* len);
     * }
     */
    public static MemorySegment mongocrypt_crypt_shared_lib_version_string(MemorySegment crypt, MemorySegment len) {
        var mh$ = mongocrypt_crypt_shared_lib_version_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(crypt, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_crypt_shared_lib_version$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"mongocrypt_crypt_shared_lib_version");
    }
    /**
     * {@snippet :
     * uint64_t mongocrypt_crypt_shared_lib_version(const mongocrypt_t* crypt);
     * }
     */
    public static long mongocrypt_crypt_shared_lib_version(MemorySegment crypt) {
        var mh$ = mongocrypt_crypt_shared_lib_version$MH();
        try {
            return (long)mh$.invokeExact(crypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_new$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"mongocrypt_ctx_new");
    }
    /**
     * {@snippet :
     * mongocrypt_ctx_t* mongocrypt_ctx_new(mongocrypt_t* crypt);
     * }
     */
    public static MemorySegment mongocrypt_ctx_new(MemorySegment crypt) {
        var mh$ = mongocrypt_ctx_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(crypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_status$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"mongocrypt_ctx_status");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_status(mongocrypt_ctx_t* ctx, mongocrypt_status_t* status);
     * }
     */
    public static boolean mongocrypt_ctx_status(MemorySegment ctx, MemorySegment status) {
        var mh$ = mongocrypt_ctx_status$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_key_id$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"mongocrypt_ctx_setopt_key_id");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_key_id(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* key_id);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_key_id(MemorySegment ctx, MemorySegment key_id) {
        var mh$ = mongocrypt_ctx_setopt_key_id$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_key_alt_name$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"mongocrypt_ctx_setopt_key_alt_name");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_key_alt_name(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* key_alt_name);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_key_alt_name(MemorySegment ctx, MemorySegment key_alt_name) {
        var mh$ = mongocrypt_ctx_setopt_key_alt_name$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, key_alt_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_key_material$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$0,"mongocrypt_ctx_setopt_key_material");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_key_material(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* key_material);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_key_material(MemorySegment ctx, MemorySegment key_material) {
        var mh$ = mongocrypt_ctx_setopt_key_material$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, key_material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_algorithm$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"mongocrypt_ctx_setopt_algorithm");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_algorithm(mongocrypt_ctx_t* ctx, char* algorithm, int len);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_algorithm(MemorySegment ctx, MemorySegment algorithm, int len) {
        var mh$ = mongocrypt_ctx_setopt_algorithm$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, algorithm, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_masterkey_aws$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"mongocrypt_ctx_setopt_masterkey_aws");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_masterkey_aws(mongocrypt_ctx_t* ctx, char* region, int32_t region_len, char* cmk, int32_t cmk_len);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_masterkey_aws(MemorySegment ctx, MemorySegment region, int region_len, MemorySegment cmk, int cmk_len) {
        var mh$ = mongocrypt_ctx_setopt_masterkey_aws$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, region, region_len, cmk, cmk_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_masterkey_aws_endpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4,"mongocrypt_ctx_setopt_masterkey_aws_endpoint");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_masterkey_aws_endpoint(mongocrypt_ctx_t* ctx, char* endpoint, int32_t endpoint_len);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_masterkey_aws_endpoint(MemorySegment ctx, MemorySegment endpoint, int endpoint_len) {
        var mh$ = mongocrypt_ctx_setopt_masterkey_aws_endpoint$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, endpoint, endpoint_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_masterkey_local$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"mongocrypt_ctx_setopt_masterkey_local");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_masterkey_local(mongocrypt_ctx_t* ctx);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_masterkey_local(MemorySegment ctx) {
        var mh$ = mongocrypt_ctx_setopt_masterkey_local$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_key_encryption_key$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"mongocrypt_ctx_setopt_key_encryption_key");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_key_encryption_key(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* bin);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_key_encryption_key(MemorySegment ctx, MemorySegment bin) {
        var mh$ = mongocrypt_ctx_setopt_key_encryption_key$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, bin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_datakey_init$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"mongocrypt_ctx_datakey_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_datakey_init(mongocrypt_ctx_t* ctx);
     * }
     */
    public static boolean mongocrypt_ctx_datakey_init(MemorySegment ctx) {
        var mh$ = mongocrypt_ctx_datakey_init$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_encrypt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"mongocrypt_ctx_encrypt_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_encrypt_init(mongocrypt_ctx_t* ctx, char* db, int32_t db_len, mongocrypt_binary_t* cmd);
     * }
     */
    public static boolean mongocrypt_ctx_encrypt_init(MemorySegment ctx, MemorySegment db, int db_len, MemorySegment cmd) {
        var mh$ = mongocrypt_ctx_encrypt_init$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, db, db_len, cmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_explicit_encrypt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"mongocrypt_ctx_explicit_encrypt_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_explicit_encrypt_init(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* msg);
     * }
     */
    public static boolean mongocrypt_ctx_explicit_encrypt_init(MemorySegment ctx, MemorySegment msg) {
        var mh$ = mongocrypt_ctx_explicit_encrypt_init$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_explicit_encrypt_expression_init$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"mongocrypt_ctx_explicit_encrypt_expression_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_explicit_encrypt_expression_init(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* msg);
     * }
     */
    public static boolean mongocrypt_ctx_explicit_encrypt_expression_init(MemorySegment ctx, MemorySegment msg) {
        var mh$ = mongocrypt_ctx_explicit_encrypt_expression_init$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_decrypt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0,"mongocrypt_ctx_decrypt_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_decrypt_init(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* doc);
     * }
     */
    public static boolean mongocrypt_ctx_decrypt_init(MemorySegment ctx, MemorySegment doc) {
        var mh$ = mongocrypt_ctx_decrypt_init$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, doc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_explicit_decrypt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"mongocrypt_ctx_explicit_decrypt_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_explicit_decrypt_init(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* msg);
     * }
     */
    public static boolean mongocrypt_ctx_explicit_decrypt_init(MemorySegment ctx, MemorySegment msg) {
        var mh$ = mongocrypt_ctx_explicit_decrypt_init$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_rewrap_many_datakey_init$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"mongocrypt_ctx_rewrap_many_datakey_init");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_rewrap_many_datakey_init(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* filter);
     * }
     */
    public static boolean mongocrypt_ctx_rewrap_many_datakey_init(MemorySegment ctx, MemorySegment filter) {
        var mh$ = mongocrypt_ctx_rewrap_many_datakey_init$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_ERROR = 0;
     * }
     */
    public static int MONGOCRYPT_CTX_ERROR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;
     * }
     */
    public static int MONGOCRYPT_CTX_NEED_MONGO_COLLINFO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;
     * }
     */
    public static int MONGOCRYPT_CTX_NEED_MONGO_MARKINGS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;
     * }
     */
    public static int MONGOCRYPT_CTX_NEED_MONGO_KEYS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_NEED_KMS = 4;
     * }
     */
    public static int MONGOCRYPT_CTX_NEED_KMS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;
     * }
     */
    public static int MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_READY = 5;
     * }
     */
    public static int MONGOCRYPT_CTX_READY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .MONGOCRYPT_CTX_DONE = 6;
     * }
     */
    public static int MONGOCRYPT_CTX_DONE() {
        return (int)6L;
    }
    public static MethodHandle mongocrypt_ctx_state$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"mongocrypt_ctx_state");
    }
    /**
     * {@snippet :
     * mongocrypt_ctx_state_t mongocrypt_ctx_state(mongocrypt_ctx_t* ctx);
     * }
     */
    public static int mongocrypt_ctx_state(MemorySegment ctx) {
        var mh$ = mongocrypt_ctx_state$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_mongo_op$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"mongocrypt_ctx_mongo_op");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_mongo_op(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* op_bson);
     * }
     */
    public static boolean mongocrypt_ctx_mongo_op(MemorySegment ctx, MemorySegment op_bson) {
        var mh$ = mongocrypt_ctx_mongo_op$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, op_bson);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_mongo_feed$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"mongocrypt_ctx_mongo_feed");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_mongo_feed(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* reply);
     * }
     */
    public static boolean mongocrypt_ctx_mongo_feed(MemorySegment ctx, MemorySegment reply) {
        var mh$ = mongocrypt_ctx_mongo_feed$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, reply);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_mongo_done$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"mongocrypt_ctx_mongo_done");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_mongo_done(mongocrypt_ctx_t* ctx);
     * }
     */
    public static boolean mongocrypt_ctx_mongo_done(MemorySegment ctx) {
        var mh$ = mongocrypt_ctx_mongo_done$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_next_kms_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"mongocrypt_ctx_next_kms_ctx");
    }
    /**
     * {@snippet :
     * mongocrypt_kms_ctx_t* mongocrypt_ctx_next_kms_ctx(mongocrypt_ctx_t* ctx);
     * }
     */
    public static MemorySegment mongocrypt_ctx_next_kms_ctx(MemorySegment ctx) {
        var mh$ = mongocrypt_ctx_next_kms_ctx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_kms_ctx_message$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"mongocrypt_kms_ctx_message");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_kms_ctx_message(mongocrypt_kms_ctx_t* kms, mongocrypt_binary_t* msg);
     * }
     */
    public static boolean mongocrypt_kms_ctx_message(MemorySegment kms, MemorySegment msg) {
        var mh$ = mongocrypt_kms_ctx_message$MH();
        try {
            return (boolean)mh$.invokeExact(kms, msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_kms_ctx_endpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"mongocrypt_kms_ctx_endpoint");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_kms_ctx_endpoint(mongocrypt_kms_ctx_t* kms, char** endpoint);
     * }
     */
    public static boolean mongocrypt_kms_ctx_endpoint(MemorySegment kms, MemorySegment endpoint) {
        var mh$ = mongocrypt_kms_ctx_endpoint$MH();
        try {
            return (boolean)mh$.invokeExact(kms, endpoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_kms_ctx_bytes_needed$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"mongocrypt_kms_ctx_bytes_needed");
    }
    /**
     * {@snippet :
     * uint32_t mongocrypt_kms_ctx_bytes_needed(mongocrypt_kms_ctx_t* kms);
     * }
     */
    public static int mongocrypt_kms_ctx_bytes_needed(MemorySegment kms) {
        var mh$ = mongocrypt_kms_ctx_bytes_needed$MH();
        try {
            return (int)mh$.invokeExact(kms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_kms_ctx_feed$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"mongocrypt_kms_ctx_feed");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_kms_ctx_feed(mongocrypt_kms_ctx_t* kms, mongocrypt_binary_t* bytes);
     * }
     */
    public static boolean mongocrypt_kms_ctx_feed(MemorySegment kms, MemorySegment bytes) {
        var mh$ = mongocrypt_kms_ctx_feed$MH();
        try {
            return (boolean)mh$.invokeExact(kms, bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_kms_ctx_status$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"mongocrypt_kms_ctx_status");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_kms_ctx_status(mongocrypt_kms_ctx_t* kms, mongocrypt_status_t* status);
     * }
     */
    public static boolean mongocrypt_kms_ctx_status(MemorySegment kms, MemorySegment status) {
        var mh$ = mongocrypt_kms_ctx_status$MH();
        try {
            return (boolean)mh$.invokeExact(kms, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_kms_ctx_get_kms_provider$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"mongocrypt_kms_ctx_get_kms_provider");
    }
    /**
     * {@snippet :
     * char* mongocrypt_kms_ctx_get_kms_provider(mongocrypt_kms_ctx_t* kms, uint32_t* len);
     * }
     */
    public static MemorySegment mongocrypt_kms_ctx_get_kms_provider(MemorySegment kms, MemorySegment len) {
        var mh$ = mongocrypt_kms_ctx_get_kms_provider$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(kms, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_kms_done$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"mongocrypt_ctx_kms_done");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_kms_done(mongocrypt_ctx_t* ctx);
     * }
     */
    public static boolean mongocrypt_ctx_kms_done(MemorySegment ctx) {
        var mh$ = mongocrypt_ctx_kms_done$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_provide_kms_providers$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"mongocrypt_ctx_provide_kms_providers");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_provide_kms_providers(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* kms_providers_definition);
     * }
     */
    public static boolean mongocrypt_ctx_provide_kms_providers(MemorySegment ctx, MemorySegment kms_providers_definition) {
        var mh$ = mongocrypt_ctx_provide_kms_providers$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, kms_providers_definition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"mongocrypt_ctx_finalize");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_finalize(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* out);
     * }
     */
    public static boolean mongocrypt_ctx_finalize(MemorySegment ctx, MemorySegment out) {
        var mh$ = mongocrypt_ctx_finalize$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"mongocrypt_ctx_destroy");
    }
    /**
     * {@snippet :
     * void mongocrypt_ctx_destroy(mongocrypt_ctx_t* ctx);
     * }
     */
    public static void mongocrypt_ctx_destroy(MemorySegment ctx) {
        var mh$ = mongocrypt_ctx_destroy$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_crypto_hooks$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$6,"mongocrypt_setopt_crypto_hooks");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_crypto_hooks(mongocrypt_t* crypt, mongocrypt_crypto_fn aes_256_cbc_encrypt, mongocrypt_crypto_fn aes_256_cbc_decrypt, mongocrypt_random_fn random, mongocrypt_hmac_fn hmac_sha_512, mongocrypt_hmac_fn hmac_sha_256, mongocrypt_hash_fn sha_256, void* ctx);
     * }
     */
    public static boolean mongocrypt_setopt_crypto_hooks(MemorySegment crypt, MemorySegment aes_256_cbc_encrypt, MemorySegment aes_256_cbc_decrypt, MemorySegment random, MemorySegment hmac_sha_512, MemorySegment hmac_sha_256, MemorySegment sha_256, MemorySegment ctx) {
        var mh$ = mongocrypt_setopt_crypto_hooks$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, aes_256_cbc_encrypt, aes_256_cbc_decrypt, random, hmac_sha_512, hmac_sha_256, sha_256, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_aes_256_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"mongocrypt_setopt_aes_256_ctr");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_aes_256_ctr(mongocrypt_t* crypt, mongocrypt_crypto_fn aes_256_ctr_encrypt, mongocrypt_crypto_fn aes_256_ctr_decrypt, void* ctx);
     * }
     */
    public static boolean mongocrypt_setopt_aes_256_ctr(MemorySegment crypt, MemorySegment aes_256_ctr_encrypt, MemorySegment aes_256_ctr_decrypt, MemorySegment ctx) {
        var mh$ = mongocrypt_setopt_aes_256_ctr$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, aes_256_ctr_encrypt, aes_256_ctr_decrypt, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_aes_256_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"mongocrypt_setopt_aes_256_ecb");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_aes_256_ecb(mongocrypt_t* crypt, mongocrypt_crypto_fn aes_256_ecb_encrypt, void* ctx);
     * }
     */
    public static boolean mongocrypt_setopt_aes_256_ecb(MemorySegment crypt, MemorySegment aes_256_ecb_encrypt, MemorySegment ctx) {
        var mh$ = mongocrypt_setopt_aes_256_ecb$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, aes_256_ecb_encrypt, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5(mongocrypt_t* crypt, mongocrypt_hmac_fn sign_rsaes_pkcs1_v1_5, void* sign_ctx);
     * }
     */
    public static boolean mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5(MemorySegment crypt, MemorySegment sign_rsaes_pkcs1_v1_5, MemorySegment sign_ctx) {
        var mh$ = mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5$MH();
        try {
            return (boolean)mh$.invokeExact(crypt, sign_rsaes_pkcs1_v1_5, sign_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_setopt_bypass_query_analysis$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"mongocrypt_setopt_bypass_query_analysis");
    }
    /**
     * {@snippet :
     * void mongocrypt_setopt_bypass_query_analysis(mongocrypt_t* crypt);
     * }
     */
    public static void mongocrypt_setopt_bypass_query_analysis(MemorySegment crypt) {
        var mh$ = mongocrypt_setopt_bypass_query_analysis$MH();
        try {
            mh$.invokeExact(crypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_contention_factor$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"mongocrypt_ctx_setopt_contention_factor");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_contention_factor(mongocrypt_ctx_t* ctx, int64_t contention_factor);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_contention_factor(MemorySegment ctx, long contention_factor) {
        var mh$ = mongocrypt_ctx_setopt_contention_factor$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, contention_factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_index_key_id$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"mongocrypt_ctx_setopt_index_key_id");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_index_key_id(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* key_id);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_index_key_id(MemorySegment ctx, MemorySegment key_id) {
        var mh$ = mongocrypt_ctx_setopt_index_key_id$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_query_type$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"mongocrypt_ctx_setopt_query_type");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_query_type(mongocrypt_ctx_t* ctx, char* query_type, int len);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_query_type(MemorySegment ctx, MemorySegment query_type, int len) {
        var mh$ = mongocrypt_ctx_setopt_query_type$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, query_type, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mongocrypt_ctx_setopt_algorithm_range$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"mongocrypt_ctx_setopt_algorithm_range");
    }
    /**
     * {@snippet :
     * _Bool mongocrypt_ctx_setopt_algorithm_range(mongocrypt_ctx_t* ctx, mongocrypt_binary_t* opts);
     * }
     */
    public static boolean mongocrypt_ctx_setopt_algorithm_range(MemorySegment ctx, MemorySegment opts) {
        var mh$ = mongocrypt_ctx_setopt_algorithm_range$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, opts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define __DARWIN_SUF_64_BIT_INO_T "$INODE64"
     * }
     */
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$20.const$3;
    }
    /**
     * {@snippet :
     * #define __DARWIN_SUF_1050 "$1050"
     * }
     */
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$20.const$4;
    }
    /**
     * {@snippet :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$20.const$5;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NULL 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return constants$21.const$0;
    }
    /**
     * {@snippet :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_VERSION "1.8.4"
     * }
     */
    public static MemorySegment MONGOCRYPT_VERSION() {
        return constants$21.const$1;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ALGORITHM_DETERMINISTIC_STR "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
     * }
     */
    public static MemorySegment MONGOCRYPT_ALGORITHM_DETERMINISTIC_STR() {
        return constants$21.const$2;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ALGORITHM_RANDOM_STR "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
     * }
     */
    public static MemorySegment MONGOCRYPT_ALGORITHM_RANDOM_STR() {
        return constants$21.const$3;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ALGORITHM_INDEXED_STR "Indexed"
     * }
     */
    public static MemorySegment MONGOCRYPT_ALGORITHM_INDEXED_STR() {
        return constants$21.const$4;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ALGORITHM_UNINDEXED_STR "Unindexed"
     * }
     */
    public static MemorySegment MONGOCRYPT_ALGORITHM_UNINDEXED_STR() {
        return constants$21.const$5;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_ALGORITHM_RANGEPREVIEW_STR "RangePreview"
     * }
     */
    public static MemorySegment MONGOCRYPT_ALGORITHM_RANGEPREVIEW_STR() {
        return constants$22.const$0;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_QUERY_TYPE_EQUALITY_STR "equality"
     * }
     */
    public static MemorySegment MONGOCRYPT_QUERY_TYPE_EQUALITY_STR() {
        return constants$22.const$1;
    }
    /**
     * {@snippet :
     * #define MONGOCRYPT_QUERY_TYPE_RANGEPREVIEW_STR "rangePreview"
     * }
     */
    public static MemorySegment MONGOCRYPT_QUERY_TYPE_RANGEPREVIEW_STR() {
        return constants$22.const$2;
    }
}


