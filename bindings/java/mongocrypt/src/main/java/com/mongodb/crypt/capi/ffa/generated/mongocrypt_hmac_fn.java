// Generated by jextract

package com.mongodb.crypt.capi.ffa.generated;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * _Bool (*mongocrypt_hmac_fn)(void* ctx,struct _mongocrypt_binary_t* key,struct _mongocrypt_binary_t* in,struct _mongocrypt_binary_t* out,struct _mongocrypt_status_t* status);
 * }
 */
public interface mongocrypt_hmac_fn {

    boolean apply(java.lang.foreign.MemorySegment ctx, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment in, java.lang.foreign.MemorySegment out, java.lang.foreign.MemorySegment status);
    static MemorySegment allocate(mongocrypt_hmac_fn fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$17.const$4, fi, constants$17.const$3, scope);
    }
    static mongocrypt_hmac_fn ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _ctx, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _in, java.lang.foreign.MemorySegment _out, java.lang.foreign.MemorySegment _status) -> {
            try {
                return (boolean)constants$17.const$5.invokeExact(symbol, _ctx, _key, _in, _out, _status);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


