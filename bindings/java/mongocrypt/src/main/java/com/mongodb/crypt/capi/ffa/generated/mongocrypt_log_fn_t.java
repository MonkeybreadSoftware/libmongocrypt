// Generated by jextract

package com.mongodb.crypt.capi.ffa.generated;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*mongocrypt_log_fn_t)(enum  level,char* message,unsigned int message_len,void* ctx);
 * }
 */
public interface mongocrypt_log_fn_t {

    void apply(int level, java.lang.foreign.MemorySegment message, int message_len, java.lang.foreign.MemorySegment ctx);
    static MemorySegment allocate(mongocrypt_log_fn_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$8.const$0, fi, constants$7.const$5, scope);
    }
    static mongocrypt_log_fn_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _level, java.lang.foreign.MemorySegment _message, int _message_len, java.lang.foreign.MemorySegment _ctx) -> {
            try {
                constants$8.const$1.invokeExact(symbol, _level, _message, _message_len, _ctx);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


